// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/redpanda-data/terraform-provider-redpanda/redpanda/kclients (interfaces: SchemaRegistryACLClientInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kclients "github.com/redpanda-data/terraform-provider-redpanda/redpanda/kclients"
)

// MockSchemaRegistryACLClientInterface is a mock of SchemaRegistryACLClientInterface interface.
type MockSchemaRegistryACLClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaRegistryACLClientInterfaceMockRecorder
}

// MockSchemaRegistryACLClientInterfaceMockRecorder is the mock recorder for MockSchemaRegistryACLClientInterface.
type MockSchemaRegistryACLClientInterfaceMockRecorder struct {
	mock *MockSchemaRegistryACLClientInterface
}

// NewMockSchemaRegistryACLClientInterface creates a new mock instance.
func NewMockSchemaRegistryACLClientInterface(ctrl *gomock.Controller) *MockSchemaRegistryACLClientInterface {
	mock := &MockSchemaRegistryACLClientInterface{ctrl: ctrl}
	mock.recorder = &MockSchemaRegistryACLClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemaRegistryACLClientInterface) EXPECT() *MockSchemaRegistryACLClientInterfaceMockRecorder {
	return m.recorder
}

// CreateACL mocks base method.
func (m *MockSchemaRegistryACLClientInterface) CreateACL(arg0 context.Context, arg1 kclients.SchemaRegistryACLRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateACL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateACL indicates an expected call of CreateACL.
func (mr *MockSchemaRegistryACLClientInterfaceMockRecorder) CreateACL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateACL", reflect.TypeOf((*MockSchemaRegistryACLClientInterface)(nil).CreateACL), arg0, arg1)
}

// DeleteACL mocks base method.
func (m *MockSchemaRegistryACLClientInterface) DeleteACL(arg0 context.Context, arg1 kclients.SchemaRegistryACLRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteACL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteACL indicates an expected call of DeleteACL.
func (mr *MockSchemaRegistryACLClientInterfaceMockRecorder) DeleteACL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteACL", reflect.TypeOf((*MockSchemaRegistryACLClientInterface)(nil).DeleteACL), arg0, arg1)
}

// ListACLs mocks base method.
func (m *MockSchemaRegistryACLClientInterface) ListACLs(arg0 context.Context, arg1 kclients.SchemaRegistryACLFilter) ([]kclients.SchemaRegistryACLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListACLs", arg0, arg1)
	ret0, _ := ret[0].([]kclients.SchemaRegistryACLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListACLs indicates an expected call of ListACLs.
func (mr *MockSchemaRegistryACLClientInterfaceMockRecorder) ListACLs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListACLs", reflect.TypeOf((*MockSchemaRegistryACLClientInterface)(nil).ListACLs), arg0, arg1)
}
