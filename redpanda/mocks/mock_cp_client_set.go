// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/redpanda-data/terraform-provider-redpanda/redpanda/cloud (interfaces: CpClientSet)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	controlplanev1beta2 "buf.build/gen/go/redpandadata/cloud/protocolbuffers/go/redpanda/api/controlplane/v1beta2"
	gomock "github.com/golang/mock/gomock"
)

// MockCpClientSet is a mock of CpClientSet interface.
type MockCpClientSet struct {
	ctrl     *gomock.Controller
	recorder *MockCpClientSetMockRecorder
}

// MockCpClientSetMockRecorder is the mock recorder for MockCpClientSet.
type MockCpClientSetMockRecorder struct {
	mock *MockCpClientSet
}

// NewMockCpClientSet creates a new mock instance.
func NewMockCpClientSet(ctrl *gomock.Controller) *MockCpClientSet {
	mock := &MockCpClientSet{ctrl: ctrl}
	mock.recorder = &MockCpClientSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCpClientSet) EXPECT() *MockCpClientSetMockRecorder {
	return m.recorder
}

// ClusterForID mocks base method.
func (m *MockCpClientSet) ClusterForID(arg0 context.Context, arg1 string) (*controlplanev1beta2.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterForID", arg0, arg1)
	ret0, _ := ret[0].(*controlplanev1beta2.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterForID indicates an expected call of ClusterForID.
func (mr *MockCpClientSetMockRecorder) ClusterForID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterForID", reflect.TypeOf((*MockCpClientSet)(nil).ClusterForID), arg0, arg1)
}

// ClusterForName mocks base method.
func (m *MockCpClientSet) ClusterForName(arg0 context.Context, arg1 string) (*controlplanev1beta2.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterForName", arg0, arg1)
	ret0, _ := ret[0].(*controlplanev1beta2.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterForName indicates an expected call of ClusterForName.
func (mr *MockCpClientSetMockRecorder) ClusterForName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterForName", reflect.TypeOf((*MockCpClientSet)(nil).ClusterForName), arg0, arg1)
}

// CreateResourceGroup mocks base method.
func (m *MockCpClientSet) CreateResourceGroup(arg0 context.Context, arg1 string) (*controlplanev1beta2.ResourceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceGroup", arg0, arg1)
	ret0, _ := ret[0].(*controlplanev1beta2.ResourceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceGroup indicates an expected call of CreateResourceGroup.
func (mr *MockCpClientSetMockRecorder) CreateResourceGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceGroup", reflect.TypeOf((*MockCpClientSet)(nil).CreateResourceGroup), arg0, arg1)
}

// NetworkForID mocks base method.
func (m *MockCpClientSet) NetworkForID(arg0 context.Context, arg1 string) (*controlplanev1beta2.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkForID", arg0, arg1)
	ret0, _ := ret[0].(*controlplanev1beta2.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkForID indicates an expected call of NetworkForID.
func (mr *MockCpClientSetMockRecorder) NetworkForID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkForID", reflect.TypeOf((*MockCpClientSet)(nil).NetworkForID), arg0, arg1)
}

// NetworkForName mocks base method.
func (m *MockCpClientSet) NetworkForName(arg0 context.Context, arg1 string) (*controlplanev1beta2.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkForName", arg0, arg1)
	ret0, _ := ret[0].(*controlplanev1beta2.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkForName indicates an expected call of NetworkForName.
func (mr *MockCpClientSetMockRecorder) NetworkForName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkForName", reflect.TypeOf((*MockCpClientSet)(nil).NetworkForName), arg0, arg1)
}

// ResourceGroupForID mocks base method.
func (m *MockCpClientSet) ResourceGroupForID(arg0 context.Context, arg1 string) (*controlplanev1beta2.ResourceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceGroupForID", arg0, arg1)
	ret0, _ := ret[0].(*controlplanev1beta2.ResourceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceGroupForID indicates an expected call of ResourceGroupForID.
func (mr *MockCpClientSetMockRecorder) ResourceGroupForID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceGroupForID", reflect.TypeOf((*MockCpClientSet)(nil).ResourceGroupForID), arg0, arg1)
}

// ResourceGroupForName mocks base method.
func (m *MockCpClientSet) ResourceGroupForName(arg0 context.Context, arg1 string) (*controlplanev1beta2.ResourceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceGroupForName", arg0, arg1)
	ret0, _ := ret[0].(*controlplanev1beta2.ResourceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceGroupForName indicates an expected call of ResourceGroupForName.
func (mr *MockCpClientSetMockRecorder) ResourceGroupForName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceGroupForName", reflect.TypeOf((*MockCpClientSet)(nil).ResourceGroupForName), arg0, arg1)
}

// ServerlessClusterForID mocks base method.
func (m *MockCpClientSet) ServerlessClusterForID(arg0 context.Context, arg1 string) (*controlplanev1beta2.ServerlessCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerlessClusterForID", arg0, arg1)
	ret0, _ := ret[0].(*controlplanev1beta2.ServerlessCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerlessClusterForID indicates an expected call of ServerlessClusterForID.
func (mr *MockCpClientSetMockRecorder) ServerlessClusterForID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerlessClusterForID", reflect.TypeOf((*MockCpClientSet)(nil).ServerlessClusterForID), arg0, arg1)
}

// ServerlessClusterForName mocks base method.
func (m *MockCpClientSet) ServerlessClusterForName(arg0 context.Context, arg1 string) (*controlplanev1beta2.ServerlessCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerlessClusterForName", arg0, arg1)
	ret0, _ := ret[0].(*controlplanev1beta2.ServerlessCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerlessClusterForName indicates an expected call of ServerlessClusterForName.
func (mr *MockCpClientSetMockRecorder) ServerlessClusterForName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerlessClusterForName", reflect.TypeOf((*MockCpClientSet)(nil).ServerlessClusterForName), arg0, arg1)
}
