// Code generated by MockGen. DO NOT EDIT.
// Source: buf.build/gen/go/redpandadata/cloud/grpc/go/redpanda/api/controlplane/v1beta2/controlplanev1beta2grpc (interfaces: OperationServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	controlplanev1beta2 "buf.build/gen/go/redpandadata/cloud/protocolbuffers/go/redpanda/api/controlplane/v1beta2"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockOperationServiceClient is a mock of OperationServiceClient interface.
type MockOperationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOperationServiceClientMockRecorder
}

// MockOperationServiceClientMockRecorder is the mock recorder for MockOperationServiceClient.
type MockOperationServiceClientMockRecorder struct {
	mock *MockOperationServiceClient
}

// NewMockOperationServiceClient creates a new mock instance.
func NewMockOperationServiceClient(ctrl *gomock.Controller) *MockOperationServiceClient {
	mock := &MockOperationServiceClient{ctrl: ctrl}
	mock.recorder = &MockOperationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationServiceClient) EXPECT() *MockOperationServiceClientMockRecorder {
	return m.recorder
}

// GetOperation mocks base method.
func (m *MockOperationServiceClient) GetOperation(arg0 context.Context, arg1 *controlplanev1beta2.GetOperationRequest, arg2 ...grpc.CallOption) (*controlplanev1beta2.GetOperationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(*controlplanev1beta2.GetOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockOperationServiceClientMockRecorder) GetOperation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockOperationServiceClient)(nil).GetOperation), varargs...)
}

// ListOperations mocks base method.
func (m *MockOperationServiceClient) ListOperations(arg0 context.Context, arg1 *controlplanev1beta2.ListOperationsRequest, arg2 ...grpc.CallOption) (*controlplanev1beta2.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*controlplanev1beta2.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockOperationServiceClientMockRecorder) ListOperations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockOperationServiceClient)(nil).ListOperations), varargs...)
}
