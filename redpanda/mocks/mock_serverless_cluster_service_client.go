// Code generated by MockGen. DO NOT EDIT.
// Source: buf.build/gen/go/redpandadata/cloud/grpc/go/redpanda/api/controlplane/v1beta2/controlplanev1beta2grpc (interfaces: ServerlessClusterServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	controlplanev1beta2 "buf.build/gen/go/redpandadata/cloud/protocolbuffers/go/redpanda/api/controlplane/v1beta2"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockServerlessClusterServiceClient is a mock of ServerlessClusterServiceClient interface.
type MockServerlessClusterServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockServerlessClusterServiceClientMockRecorder
}

// MockServerlessClusterServiceClientMockRecorder is the mock recorder for MockServerlessClusterServiceClient.
type MockServerlessClusterServiceClientMockRecorder struct {
	mock *MockServerlessClusterServiceClient
}

// NewMockServerlessClusterServiceClient creates a new mock instance.
func NewMockServerlessClusterServiceClient(ctrl *gomock.Controller) *MockServerlessClusterServiceClient {
	mock := &MockServerlessClusterServiceClient{ctrl: ctrl}
	mock.recorder = &MockServerlessClusterServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerlessClusterServiceClient) EXPECT() *MockServerlessClusterServiceClientMockRecorder {
	return m.recorder
}

// CreateServerlessCluster mocks base method.
func (m *MockServerlessClusterServiceClient) CreateServerlessCluster(arg0 context.Context, arg1 *controlplanev1beta2.CreateServerlessClusterRequest, arg2 ...grpc.CallOption) (*controlplanev1beta2.CreateServerlessClusterOperation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServerlessCluster", varargs...)
	ret0, _ := ret[0].(*controlplanev1beta2.CreateServerlessClusterOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerlessCluster indicates an expected call of CreateServerlessCluster.
func (mr *MockServerlessClusterServiceClientMockRecorder) CreateServerlessCluster(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerlessCluster", reflect.TypeOf((*MockServerlessClusterServiceClient)(nil).CreateServerlessCluster), varargs...)
}

// DeleteServerlessCluster mocks base method.
func (m *MockServerlessClusterServiceClient) DeleteServerlessCluster(arg0 context.Context, arg1 *controlplanev1beta2.DeleteServerlessClusterRequest, arg2 ...grpc.CallOption) (*controlplanev1beta2.DeleteServerlessClusterOperation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServerlessCluster", varargs...)
	ret0, _ := ret[0].(*controlplanev1beta2.DeleteServerlessClusterOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServerlessCluster indicates an expected call of DeleteServerlessCluster.
func (mr *MockServerlessClusterServiceClientMockRecorder) DeleteServerlessCluster(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerlessCluster", reflect.TypeOf((*MockServerlessClusterServiceClient)(nil).DeleteServerlessCluster), varargs...)
}

// DummyCreateMetadata mocks base method.
func (m *MockServerlessClusterServiceClient) DummyCreateMetadata(arg0 context.Context, arg1 *controlplanev1beta2.CreateServerlessClusterRequest, arg2 ...grpc.CallOption) (*controlplanev1beta2.CreateServerlessClusterMetadata, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DummyCreateMetadata", varargs...)
	ret0, _ := ret[0].(*controlplanev1beta2.CreateServerlessClusterMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyCreateMetadata indicates an expected call of DummyCreateMetadata.
func (mr *MockServerlessClusterServiceClientMockRecorder) DummyCreateMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyCreateMetadata", reflect.TypeOf((*MockServerlessClusterServiceClient)(nil).DummyCreateMetadata), varargs...)
}

// DummyDeleteMetadata mocks base method.
func (m *MockServerlessClusterServiceClient) DummyDeleteMetadata(arg0 context.Context, arg1 *controlplanev1beta2.DeleteServerlessClusterRequest, arg2 ...grpc.CallOption) (*controlplanev1beta2.DeleteServerlessClusterMetadata, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DummyDeleteMetadata", varargs...)
	ret0, _ := ret[0].(*controlplanev1beta2.DeleteServerlessClusterMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyDeleteMetadata indicates an expected call of DummyDeleteMetadata.
func (mr *MockServerlessClusterServiceClientMockRecorder) DummyDeleteMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyDeleteMetadata", reflect.TypeOf((*MockServerlessClusterServiceClient)(nil).DummyDeleteMetadata), varargs...)
}

// GetServerlessCluster mocks base method.
func (m *MockServerlessClusterServiceClient) GetServerlessCluster(arg0 context.Context, arg1 *controlplanev1beta2.GetServerlessClusterRequest, arg2 ...grpc.CallOption) (*controlplanev1beta2.GetServerlessClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServerlessCluster", varargs...)
	ret0, _ := ret[0].(*controlplanev1beta2.GetServerlessClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerlessCluster indicates an expected call of GetServerlessCluster.
func (mr *MockServerlessClusterServiceClientMockRecorder) GetServerlessCluster(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerlessCluster", reflect.TypeOf((*MockServerlessClusterServiceClient)(nil).GetServerlessCluster), varargs...)
}

// ListServerlessClusters mocks base method.
func (m *MockServerlessClusterServiceClient) ListServerlessClusters(arg0 context.Context, arg1 *controlplanev1beta2.ListServerlessClustersRequest, arg2 ...grpc.CallOption) (*controlplanev1beta2.ListServerlessClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServerlessClusters", varargs...)
	ret0, _ := ret[0].(*controlplanev1beta2.ListServerlessClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServerlessClusters indicates an expected call of ListServerlessClusters.
func (mr *MockServerlessClusterServiceClientMockRecorder) ListServerlessClusters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServerlessClusters", reflect.TypeOf((*MockServerlessClusterServiceClient)(nil).ListServerlessClusters), varargs...)
}
