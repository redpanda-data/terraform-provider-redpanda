// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/redpanda-data/terraform-provider-redpanda/redpanda/utils (interfaces: ThroughputTierClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	controlplanev1beta2 "buf.build/gen/go/redpandadata/cloud/protocolbuffers/go/redpanda/api/controlplane/v1beta2"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockThroughputTierClient is a mock of ThroughputTierClient interface.
type MockThroughputTierClient struct {
	ctrl     *gomock.Controller
	recorder *MockThroughputTierClientMockRecorder
}

// MockThroughputTierClientMockRecorder is the mock recorder for MockThroughputTierClient.
type MockThroughputTierClientMockRecorder struct {
	mock *MockThroughputTierClient
}

// NewMockThroughputTierClient creates a new mock instance.
func NewMockThroughputTierClient(ctrl *gomock.Controller) *MockThroughputTierClient {
	mock := &MockThroughputTierClient{ctrl: ctrl}
	mock.recorder = &MockThroughputTierClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThroughputTierClient) EXPECT() *MockThroughputTierClientMockRecorder {
	return m.recorder
}

// ListThroughputTiers mocks base method.
func (m *MockThroughputTierClient) ListThroughputTiers(arg0 context.Context, arg1 *controlplanev1beta2.ListThroughputTiersRequest, arg2 ...grpc.CallOption) (*controlplanev1beta2.ListThroughputTiersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListThroughputTiers", varargs...)
	ret0, _ := ret[0].(*controlplanev1beta2.ListThroughputTiersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListThroughputTiers indicates an expected call of ListThroughputTiers.
func (mr *MockThroughputTierClientMockRecorder) ListThroughputTiers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListThroughputTiers", reflect.TypeOf((*MockThroughputTierClient)(nil).ListThroughputTiers), varargs...)
}
