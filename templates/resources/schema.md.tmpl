---
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name}} ({{.Type}})

{{ .Description | trimspace }}

Creates a schema in the Redpanda Schema Registry.

{{ .SchemaMarkdown | trimspace }}

## Example Usage

{{ tffile "examples/docs/schema/main.tf" }}

## Schema Evolution and Compatibility

Redpanda Schema Registry supports schema evolution with different compatibility levels:

- `BACKWARD` (default): New schema can read data written with the previous schema
- `FORWARD`: Previous schema can read data written with the new schema  
- `FULL`: Both backward and forward compatibility
- `BACKWARD_TRANSITIVE`: Backward compatibility with all previous versions
- `FORWARD_TRANSITIVE`: Forward compatibility with all previous versions
- `FULL_TRANSITIVE`: Both backward and forward compatibility with all previous versions
- `NONE`: No compatibility checking

For more details, see the [Redpanda Schema Registry API documentation](https://docs.redpanda.com/current/manage/schema-reg/schema-reg-api/).

## Schema References

Schemas can reference other schemas to build complex data models. When using references, ensure the referenced schemas are created first.

## Security Considerations

We recommend storing Schema Registry credentials in environment variables or a secret store:

- `REDPANDA_SR_USERNAME` for the username
- `REDPANDA_SR_PASSWORD` for the password

## Import

```shell
terraform import {{.Name}}.example clusterId,subjectName,version
```

Where:
- `clusterId` is the ID of the cluster
- `subjectName` is the subject name of the schema
- `version` is the version of the schema to import

## API Reference

For more information, see the [Redpanda Schema Registry API documentation](https://docs.redpanda.com/current/manage/schema-reg/schema-reg-api/) and the [Redpanda Cloud Data Plane API documentation](https://docs.redpanda.com/api/cloud-dataplane-api/).