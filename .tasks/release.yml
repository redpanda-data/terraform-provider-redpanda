version: '3'

vars:
  GPG_PRIVATE_KEY: '{{.GPG_PRIVATE_KEY | default ""}}'
  PASSPHRASE: '{{.PASSPHRASE | default ""}}'
  GPG_FINGERPRINT: '{{.GPG_FINGERPRINT | default ""}}'

tasks:
  check-gpg-key:
    desc: "Check if GPG_PRIVATE_KEY is set"
    internal: true
    preconditions:
      - sh: '[ -n "{{.GPG_PRIVATE_KEY}}" ]'
        msg: "GPG_PRIVATE_KEY environment variable is required"

  check-passphrase:
    desc: "Check if PASSPHRASE is set"
    internal: true
    preconditions:
      - sh: '[ -n "{{.PASSPHRASE}}" ]'
        msg: "PASSPHRASE environment variable is required"

  check-gpg-fingerprint:
    desc: "Check if GPG_FINGERPRINT is set"
    internal: true
    preconditions:
      - sh: '[ -n "{{.GPG_FINGERPRINT}}" ]'
        msg: "GPG_FINGERPRINT environment variable is required"

  import-gpg:
    desc: "Import GPG private key for signing releases"
    deps: [check-gpg-key, check-passphrase]
    cmds:
      - echo "Importing GPG private key..."
      - echo "{{.GPG_PRIVATE_KEY}}" | base64 -d | gpg --batch --pinentry-mode loopback --passphrase "{{.PASSPHRASE}}" --import
      - echo "GPG key imported successfully"
    status:
      - gpg --list-secret-keys "{{.GPG_FINGERPRINT}}" 2>/dev/null

  default:
    desc: "Create a new release using goreleaser"
    deps: [import-gpg, check-gpg-fingerprint]
    cmds:
      - echo "Creating release with goreleaser..."
      - goreleaser release --clean --verbose
      - echo "Release created successfully"

  check:
    desc: "Check goreleaser configuration without creating a release"
    cmds:
      - echo "Checking goreleaser configuration..."
      - goreleaser check
      - echo "Configuration is valid"

  build:
    desc: "Build release artifacts locally without publishing"
    deps: [import-gpg, check-gpg-fingerprint]
    cmds:
      - echo "Building release artifacts locally..."
      - goreleaser build --snapshot --clean
      - echo "Local build completed"

  snapshot:
    desc: "Create a snapshot release for testing"
    deps: [import-gpg, check-gpg-fingerprint]
    cmds:
      - echo "Creating snapshot release..."
      - goreleaser release --snapshot --clean
      - echo "Snapshot created successfully"