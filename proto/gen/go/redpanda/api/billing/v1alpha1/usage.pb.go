// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: redpanda/api/billing/v1alpha1/usage.proto

package billingv1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/redpanda-data/terraform-provider-redpanda/proto/gen/go/redpanda/api/common/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListUsagesRequest_WindowSize int32

const (
	// WINDOW_SIZE_UNSPECIFIED will return one single item containing all usage on the time frame
	ListUsagesRequest_WINDOW_SIZE_UNSPECIFIED ListUsagesRequest_WindowSize = 0
	// WINDOW_SIZE_HOUR will return usage on hourly aggregates
	ListUsagesRequest_WINDOW_SIZE_HOUR ListUsagesRequest_WindowSize = 1
	// WINDOW_SIZE_DAY will return usage on dayly aggregates
	ListUsagesRequest_WINDOW_SIZE_DAY ListUsagesRequest_WindowSize = 2
)

// Enum value maps for ListUsagesRequest_WindowSize.
var (
	ListUsagesRequest_WindowSize_name = map[int32]string{
		0: "WINDOW_SIZE_UNSPECIFIED",
		1: "WINDOW_SIZE_HOUR",
		2: "WINDOW_SIZE_DAY",
	}
	ListUsagesRequest_WindowSize_value = map[string]int32{
		"WINDOW_SIZE_UNSPECIFIED": 0,
		"WINDOW_SIZE_HOUR":        1,
		"WINDOW_SIZE_DAY":         2,
	}
)

func (x ListUsagesRequest_WindowSize) Enum() *ListUsagesRequest_WindowSize {
	p := new(ListUsagesRequest_WindowSize)
	*p = x
	return p
}

func (x ListUsagesRequest_WindowSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListUsagesRequest_WindowSize) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_billing_v1alpha1_usage_proto_enumTypes[0].Descriptor()
}

func (ListUsagesRequest_WindowSize) Type() protoreflect.EnumType {
	return &file_redpanda_api_billing_v1alpha1_usage_proto_enumTypes[0]
}

func (x ListUsagesRequest_WindowSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListUsagesRequest_WindowSize.Descriptor instead.
func (ListUsagesRequest_WindowSize) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_billing_v1alpha1_usage_proto_rawDescGZIP(), []int{1, 0}
}

type UsageResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId   string      `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductType ProductType `protobuf:"varint,2,opt,name=product_type,json=productType,proto3,enum=redpanda.api.billing.v1alpha1.ProductType" json:"product_type,omitempty"`
}

func (x *UsageResource) Reset() {
	*x = UsageResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageResource) ProtoMessage() {}

func (x *UsageResource) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageResource.ProtoReflect.Descriptor instead.
func (*UsageResource) Descriptor() ([]byte, []int) {
	return file_redpanda_api_billing_v1alpha1_usage_proto_rawDescGZIP(), []int{0}
}

func (x *UsageResource) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *UsageResource) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

type ListUsagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    *ListUsagesRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	PageSize  int32                     `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string                    `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListUsagesRequest) Reset() {
	*x = ListUsagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsagesRequest) ProtoMessage() {}

func (x *ListUsagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsagesRequest.ProtoReflect.Descriptor instead.
func (*ListUsagesRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_billing_v1alpha1_usage_proto_rawDescGZIP(), []int{1}
}

func (x *ListUsagesRequest) GetFilter() *ListUsagesRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListUsagesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUsagesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListUsagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usages        []*Usage `protobuf:"bytes,1,rep,name=usages,proto3" json:"usages,omitempty"`
	NextPageToken string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListUsagesResponse) Reset() {
	*x = ListUsagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsagesResponse) ProtoMessage() {}

func (x *ListUsagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsagesResponse.ProtoReflect.Descriptor instead.
func (*ListUsagesResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_billing_v1alpha1_usage_proto_rawDescGZIP(), []int{2}
}

func (x *ListUsagesResponse) GetUsages() []*Usage {
	if x != nil {
		return x.Usages
	}
	return nil
}

func (x *ListUsagesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type Usage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeFrom   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	TimeTo     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
	GroupKey   string                 `protobuf:"bytes,3,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	GroupValue string                 `protobuf:"bytes,4,opt,name=group_value,json=groupValue,proto3" json:"group_value,omitempty"`
	Value      string                 `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Usage) Reset() {
	*x = Usage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Usage) ProtoMessage() {}

func (x *Usage) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Usage.ProtoReflect.Descriptor instead.
func (*Usage) Descriptor() ([]byte, []int) {
	return file_redpanda_api_billing_v1alpha1_usage_proto_rawDescGZIP(), []int{3}
}

func (x *Usage) GetTimeFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeFrom
	}
	return nil
}

func (x *Usage) GetTimeTo() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeTo
	}
	return nil
}

func (x *Usage) GetGroupKey() string {
	if x != nil {
		return x.GroupKey
	}
	return ""
}

func (x *Usage) GetGroupValue() string {
	if x != nil {
		return x.GroupValue
	}
	return ""
}

func (x *Usage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ListUsagesRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartingOn   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=starting_on,json=startingOn,proto3" json:"starting_on,omitempty"`
	EndingBefore *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ending_before,json=endingBefore,proto3" json:"ending_before,omitempty"`
	Resource     *UsageResource         `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	UsageTypeId  string                 `protobuf:"bytes,4,opt,name=usage_type_id,json=usageTypeId,proto3" json:"usage_type_id,omitempty"`
	// WindowSize If is true, will return the usage for the current billing period and ignore starting_on and ending_before
	WindowSize    ListUsagesRequest_WindowSize `protobuf:"varint,5,opt,name=window_size,json=windowSize,proto3,enum=redpanda.api.billing.v1alpha1.ListUsagesRequest_WindowSize" json:"window_size,omitempty"`
	CurrentPeriod bool                         `protobuf:"varint,6,opt,name=current_period,json=currentPeriod,proto3" json:"current_period,omitempty"`
}

func (x *ListUsagesRequest_Filter) Reset() {
	*x = ListUsagesRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsagesRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsagesRequest_Filter) ProtoMessage() {}

func (x *ListUsagesRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsagesRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListUsagesRequest_Filter) Descriptor() ([]byte, []int) {
	return file_redpanda_api_billing_v1alpha1_usage_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListUsagesRequest_Filter) GetStartingOn() *timestamppb.Timestamp {
	if x != nil {
		return x.StartingOn
	}
	return nil
}

func (x *ListUsagesRequest_Filter) GetEndingBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.EndingBefore
	}
	return nil
}

func (x *ListUsagesRequest_Filter) GetResource() *UsageResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ListUsagesRequest_Filter) GetUsageTypeId() string {
	if x != nil {
		return x.UsageTypeId
	}
	return ""
}

func (x *ListUsagesRequest_Filter) GetWindowSize() ListUsagesRequest_WindowSize {
	if x != nil {
		return x.WindowSize
	}
	return ListUsagesRequest_WINDOW_SIZE_UNSPECIFIED
}

func (x *ListUsagesRequest_Filter) GetCurrentPeriod() bool {
	if x != nil {
		return x.CurrentPeriod
	}
	return false
}

var File_redpanda_api_billing_v1alpha1_usage_proto protoreflect.FileDescriptor

var file_redpanda_api_billing_v1alpha1_usage_proto_rawDesc = []byte{
	0x0a, 0x29, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x8f, 0x05, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x83, 0x03, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f,
	0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x0d,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0b, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0b, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22,
	0x54, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x49,
	0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x44, 0x41, 0x59, 0x10, 0x02, 0x22, 0x7a, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x80, 0x02, 0x0a, 0x05, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x09, 0xe0, 0x41, 0x03, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x3e, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x09, 0xe0, 0x41,
	0x03, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12,
	0x26, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x03, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41,
	0x03, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x03, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x32, 0xf2, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xe1, 0x02, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xed, 0x01, 0x92, 0x41, 0xb5, 0x01,
	0x12, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4a, 0x42, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x3b, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x35, 0x0a, 0x33, 0x1a, 0x31, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a,
	0x54, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x4d, 0x0a, 0x33, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x75,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x12, 0x16, 0x0a,
	0x14, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0xb2, 0xbf, 0x07, 0x18, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x3a,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x66,
	0x6f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0xb7, 0x02, 0x0a, 0x21, 0x63, 0x6f,
	0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42,
	0x0a, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02,
	0x03, 0x52, 0x41, 0x42, 0xaa, 0x02, 0x1d, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x41, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1d, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c,
	0x41, 0x70, 0x69, 0x5c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x29, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c,
	0x41, 0x70, 0x69, 0x5c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69,
	0x3a, 0x3a, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_billing_v1alpha1_usage_proto_rawDescOnce sync.Once
	file_redpanda_api_billing_v1alpha1_usage_proto_rawDescData = file_redpanda_api_billing_v1alpha1_usage_proto_rawDesc
)

func file_redpanda_api_billing_v1alpha1_usage_proto_rawDescGZIP() []byte {
	file_redpanda_api_billing_v1alpha1_usage_proto_rawDescOnce.Do(func() {
		file_redpanda_api_billing_v1alpha1_usage_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_billing_v1alpha1_usage_proto_rawDescData)
	})
	return file_redpanda_api_billing_v1alpha1_usage_proto_rawDescData
}

var file_redpanda_api_billing_v1alpha1_usage_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_redpanda_api_billing_v1alpha1_usage_proto_goTypes = []interface{}{
	(ListUsagesRequest_WindowSize)(0), // 0: redpanda.api.billing.v1alpha1.ListUsagesRequest.WindowSize
	(*UsageResource)(nil),             // 1: redpanda.api.billing.v1alpha1.UsageResource
	(*ListUsagesRequest)(nil),         // 2: redpanda.api.billing.v1alpha1.ListUsagesRequest
	(*ListUsagesResponse)(nil),        // 3: redpanda.api.billing.v1alpha1.ListUsagesResponse
	(*Usage)(nil),                     // 4: redpanda.api.billing.v1alpha1.Usage
	(*ListUsagesRequest_Filter)(nil),  // 5: redpanda.api.billing.v1alpha1.ListUsagesRequest.Filter
	(ProductType)(0),                  // 6: redpanda.api.billing.v1alpha1.ProductType
	(*timestamppb.Timestamp)(nil),     // 7: google.protobuf.Timestamp
}
var file_redpanda_api_billing_v1alpha1_usage_proto_depIdxs = []int32{
	6,  // 0: redpanda.api.billing.v1alpha1.UsageResource.product_type:type_name -> redpanda.api.billing.v1alpha1.ProductType
	5,  // 1: redpanda.api.billing.v1alpha1.ListUsagesRequest.filter:type_name -> redpanda.api.billing.v1alpha1.ListUsagesRequest.Filter
	4,  // 2: redpanda.api.billing.v1alpha1.ListUsagesResponse.usages:type_name -> redpanda.api.billing.v1alpha1.Usage
	7,  // 3: redpanda.api.billing.v1alpha1.Usage.time_from:type_name -> google.protobuf.Timestamp
	7,  // 4: redpanda.api.billing.v1alpha1.Usage.time_to:type_name -> google.protobuf.Timestamp
	7,  // 5: redpanda.api.billing.v1alpha1.ListUsagesRequest.Filter.starting_on:type_name -> google.protobuf.Timestamp
	7,  // 6: redpanda.api.billing.v1alpha1.ListUsagesRequest.Filter.ending_before:type_name -> google.protobuf.Timestamp
	1,  // 7: redpanda.api.billing.v1alpha1.ListUsagesRequest.Filter.resource:type_name -> redpanda.api.billing.v1alpha1.UsageResource
	0,  // 8: redpanda.api.billing.v1alpha1.ListUsagesRequest.Filter.window_size:type_name -> redpanda.api.billing.v1alpha1.ListUsagesRequest.WindowSize
	2,  // 9: redpanda.api.billing.v1alpha1.UsageService.ListUsages:input_type -> redpanda.api.billing.v1alpha1.ListUsagesRequest
	3,  // 10: redpanda.api.billing.v1alpha1.UsageService.ListUsages:output_type -> redpanda.api.billing.v1alpha1.ListUsagesResponse
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_redpanda_api_billing_v1alpha1_usage_proto_init() }
func file_redpanda_api_billing_v1alpha1_usage_proto_init() {
	if File_redpanda_api_billing_v1alpha1_usage_proto != nil {
		return
	}
	file_redpanda_api_billing_v1alpha1_usage_type_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Usage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsagesRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_billing_v1alpha1_usage_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_billing_v1alpha1_usage_proto_goTypes,
		DependencyIndexes: file_redpanda_api_billing_v1alpha1_usage_proto_depIdxs,
		EnumInfos:         file_redpanda_api_billing_v1alpha1_usage_proto_enumTypes,
		MessageInfos:      file_redpanda_api_billing_v1alpha1_usage_proto_msgTypes,
	}.Build()
	File_redpanda_api_billing_v1alpha1_usage_proto = out.File
	file_redpanda_api_billing_v1alpha1_usage_proto_rawDesc = nil
	file_redpanda_api_billing_v1alpha1_usage_proto_goTypes = nil
	file_redpanda_api_billing_v1alpha1_usage_proto_depIdxs = nil
}
