// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: redpanda/api/console/v1alpha1/list_messages.proto

package consolev1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ListMessagesRequest is the request for ListMessages call.
type ListMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic                     string           `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`                                                                                                             // Topic name.
	StartOffset               int64            `protobuf:"zigzag64,2,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`                                                                           // Start offset. -1 for recent (newest - results), -2 for oldest offset, -3 for newest, -4 for timestamp.
	StartTimestamp            int64            `protobuf:"varint,3,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`                                                                    // Start offset by unix timestamp in ms (only considered if start offset is set to -4).
	PartitionId               int32            `protobuf:"varint,4,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`                                                                             // -1 for all partition ids
	MaxResults                int32            `protobuf:"varint,5,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`                                                                                // Maximum number of results
	FilterInterpreterCode     string           `protobuf:"bytes,6,opt,name=filter_interpreter_code,json=filterInterpreterCode,proto3" json:"filter_interpreter_code,omitempty"`                                              // Base64 encoded code
	Enterprise                []byte           `protobuf:"bytes,7,opt,name=enterprise,proto3" json:"enterprise,omitempty"`                                                                                                   // Enterprise may only be set in the Enterprise mode. The JSON deserialization is deferred.
	Troubleshoot              bool             `protobuf:"varint,8,opt,name=troubleshoot,proto3" json:"troubleshoot,omitempty"`                                                                                              // Optionally include troubleshooting data in the response.
	IncludeOriginalRawPayload bool             `protobuf:"varint,9,opt,name=include_original_raw_payload,json=includeOriginalRawPayload,proto3" json:"include_original_raw_payload,omitempty"`                               // Optionally include original raw payload.
	KeyDeserializer           *PayloadEncoding `protobuf:"varint,10,opt,name=key_deserializer,json=keyDeserializer,proto3,enum=redpanda.api.console.v1alpha1.PayloadEncoding,oneof" json:"key_deserializer,omitempty"`       // Optionally specify key payload deserialization strategy to use.
	ValueDeserializer         *PayloadEncoding `protobuf:"varint,11,opt,name=value_deserializer,json=valueDeserializer,proto3,enum=redpanda.api.console.v1alpha1.PayloadEncoding,oneof" json:"value_deserializer,omitempty"` // Optionally specify value payload deserialization strategy to use.
	IgnoreMaxSizeLimit        bool             `protobuf:"varint,12,opt,name=ignore_max_size_limit,json=ignoreMaxSizeLimit,proto3" json:"ignore_max_size_limit,omitempty"`                                                   // Optionally ignore configured maximum payload size limit.
}

func (x *ListMessagesRequest) Reset() {
	*x = ListMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesRequest) ProtoMessage() {}

func (x *ListMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesRequest.ProtoReflect.Descriptor instead.
func (*ListMessagesRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescGZIP(), []int{0}
}

func (x *ListMessagesRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ListMessagesRequest) GetStartOffset() int64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *ListMessagesRequest) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *ListMessagesRequest) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *ListMessagesRequest) GetMaxResults() int32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

func (x *ListMessagesRequest) GetFilterInterpreterCode() string {
	if x != nil {
		return x.FilterInterpreterCode
	}
	return ""
}

func (x *ListMessagesRequest) GetEnterprise() []byte {
	if x != nil {
		return x.Enterprise
	}
	return nil
}

func (x *ListMessagesRequest) GetTroubleshoot() bool {
	if x != nil {
		return x.Troubleshoot
	}
	return false
}

func (x *ListMessagesRequest) GetIncludeOriginalRawPayload() bool {
	if x != nil {
		return x.IncludeOriginalRawPayload
	}
	return false
}

func (x *ListMessagesRequest) GetKeyDeserializer() PayloadEncoding {
	if x != nil && x.KeyDeserializer != nil {
		return *x.KeyDeserializer
	}
	return PayloadEncoding_PAYLOAD_ENCODING_UNSPECIFIED
}

func (x *ListMessagesRequest) GetValueDeserializer() PayloadEncoding {
	if x != nil && x.ValueDeserializer != nil {
		return *x.ValueDeserializer
	}
	return PayloadEncoding_PAYLOAD_ENCODING_UNSPECIFIED
}

func (x *ListMessagesRequest) GetIgnoreMaxSizeLimit() bool {
	if x != nil {
		return x.IgnoreMaxSizeLimit
	}
	return false
}

// ListMessagesResponse is the response for ListMessages call.
type ListMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The control message as we consume messages.
	//
	// Types that are assignable to ControlMessage:
	//
	//	*ListMessagesResponse_Data
	//	*ListMessagesResponse_Phase
	//	*ListMessagesResponse_Progress
	//	*ListMessagesResponse_Done
	//	*ListMessagesResponse_Error
	ControlMessage isListMessagesResponse_ControlMessage `protobuf_oneof:"control_message"`
}

func (x *ListMessagesResponse) Reset() {
	*x = ListMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesResponse) ProtoMessage() {}

func (x *ListMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesResponse.ProtoReflect.Descriptor instead.
func (*ListMessagesResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescGZIP(), []int{1}
}

func (m *ListMessagesResponse) GetControlMessage() isListMessagesResponse_ControlMessage {
	if m != nil {
		return m.ControlMessage
	}
	return nil
}

func (x *ListMessagesResponse) GetData() *ListMessagesResponse_DataMessage {
	if x, ok := x.GetControlMessage().(*ListMessagesResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ListMessagesResponse) GetPhase() *ListMessagesResponse_PhaseMessage {
	if x, ok := x.GetControlMessage().(*ListMessagesResponse_Phase); ok {
		return x.Phase
	}
	return nil
}

func (x *ListMessagesResponse) GetProgress() *ListMessagesResponse_ProgressMessage {
	if x, ok := x.GetControlMessage().(*ListMessagesResponse_Progress); ok {
		return x.Progress
	}
	return nil
}

func (x *ListMessagesResponse) GetDone() *ListMessagesResponse_StreamCompletedMessage {
	if x, ok := x.GetControlMessage().(*ListMessagesResponse_Done); ok {
		return x.Done
	}
	return nil
}

func (x *ListMessagesResponse) GetError() *ListMessagesResponse_ErrorMessage {
	if x, ok := x.GetControlMessage().(*ListMessagesResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isListMessagesResponse_ControlMessage interface {
	isListMessagesResponse_ControlMessage()
}

type ListMessagesResponse_Data struct {
	Data *ListMessagesResponse_DataMessage `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ListMessagesResponse_Phase struct {
	Phase *ListMessagesResponse_PhaseMessage `protobuf:"bytes,2,opt,name=phase,proto3,oneof"`
}

type ListMessagesResponse_Progress struct {
	Progress *ListMessagesResponse_ProgressMessage `protobuf:"bytes,3,opt,name=progress,proto3,oneof"`
}

type ListMessagesResponse_Done struct {
	Done *ListMessagesResponse_StreamCompletedMessage `protobuf:"bytes,4,opt,name=done,proto3,oneof"`
}

type ListMessagesResponse_Error struct {
	Error *ListMessagesResponse_ErrorMessage `protobuf:"bytes,5,opt,name=error,proto3,oneof"`
}

func (*ListMessagesResponse_Data) isListMessagesResponse_ControlMessage() {}

func (*ListMessagesResponse_Phase) isListMessagesResponse_ControlMessage() {}

func (*ListMessagesResponse_Progress) isListMessagesResponse_ControlMessage() {}

func (*ListMessagesResponse_Done) isListMessagesResponse_ControlMessage() {}

func (*ListMessagesResponse_Error) isListMessagesResponse_ControlMessage() {}

// KafkaRecordPayload is record payload representation.
type KafkaRecordPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalPayload    []byte                `protobuf:"bytes,1,opt,name=original_payload,json=originalPayload,proto3,oneof" json:"original_payload,omitempty"`          // Original raw binary payload.
	NormalizedPayload  []byte                `protobuf:"bytes,2,opt,name=normalized_payload,json=normalizedPayload,proto3,oneof" json:"normalized_payload,omitempty"`    // Normalized user friendly representation of the payload.
	Encoding           PayloadEncoding       `protobuf:"varint,3,opt,name=encoding,proto3,enum=redpanda.api.console.v1alpha1.PayloadEncoding" json:"encoding,omitempty"` // Payload encoding if we have been able to detect.
	SchemaId           *int32                `protobuf:"varint,4,opt,name=schema_id,json=schemaId,proto3,oneof" json:"schema_id,omitempty"`                              // Optionally, the schema ID used to deserialized the message.
	PayloadSize        int32                 `protobuf:"varint,5,opt,name=payload_size,json=payloadSize,proto3" json:"payload_size,omitempty"`                           // Payload size in bytes.
	IsPayloadTooLarge  bool                  `protobuf:"varint,6,opt,name=is_payload_too_large,json=isPayloadTooLarge,proto3" json:"is_payload_too_large,omitempty"`     // If payload is too large for deserialization.
	TroubleshootReport []*TroubleshootReport `protobuf:"bytes,7,rep,name=troubleshoot_report,json=troubleshootReport,proto3" json:"troubleshoot_report,omitempty"`       // Troubleshooting data for debugging.
}

func (x *KafkaRecordPayload) Reset() {
	*x = KafkaRecordPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaRecordPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaRecordPayload) ProtoMessage() {}

func (x *KafkaRecordPayload) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaRecordPayload.ProtoReflect.Descriptor instead.
func (*KafkaRecordPayload) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescGZIP(), []int{2}
}

func (x *KafkaRecordPayload) GetOriginalPayload() []byte {
	if x != nil {
		return x.OriginalPayload
	}
	return nil
}

func (x *KafkaRecordPayload) GetNormalizedPayload() []byte {
	if x != nil {
		return x.NormalizedPayload
	}
	return nil
}

func (x *KafkaRecordPayload) GetEncoding() PayloadEncoding {
	if x != nil {
		return x.Encoding
	}
	return PayloadEncoding_PAYLOAD_ENCODING_UNSPECIFIED
}

func (x *KafkaRecordPayload) GetSchemaId() int32 {
	if x != nil && x.SchemaId != nil {
		return *x.SchemaId
	}
	return 0
}

func (x *KafkaRecordPayload) GetPayloadSize() int32 {
	if x != nil {
		return x.PayloadSize
	}
	return 0
}

func (x *KafkaRecordPayload) GetIsPayloadTooLarge() bool {
	if x != nil {
		return x.IsPayloadTooLarge
	}
	return false
}

func (x *KafkaRecordPayload) GetTroubleshootReport() []*TroubleshootReport {
	if x != nil {
		return x.TroubleshootReport
	}
	return nil
}

// Data control message.
type ListMessagesResponse_DataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId     int32                `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Offset          int64                `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Timestamp       int64                `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Compression     CompressionType      `protobuf:"varint,4,opt,name=compression,proto3,enum=redpanda.api.console.v1alpha1.CompressionType" json:"compression,omitempty"`
	IsTransactional bool                 `protobuf:"varint,5,opt,name=is_transactional,json=isTransactional,proto3" json:"is_transactional,omitempty"`
	Headers         []*KafkaRecordHeader `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty"` // Kafka record headers.
	Key             *KafkaRecordPayload  `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`         // Kafka key of the payload record.
	Value           *KafkaRecordPayload  `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`     // Kafka value of the payload record.
}

func (x *ListMessagesResponse_DataMessage) Reset() {
	*x = ListMessagesResponse_DataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMessagesResponse_DataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesResponse_DataMessage) ProtoMessage() {}

func (x *ListMessagesResponse_DataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesResponse_DataMessage.ProtoReflect.Descriptor instead.
func (*ListMessagesResponse_DataMessage) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListMessagesResponse_DataMessage) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *ListMessagesResponse_DataMessage) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListMessagesResponse_DataMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ListMessagesResponse_DataMessage) GetCompression() CompressionType {
	if x != nil {
		return x.Compression
	}
	return CompressionType_COMPRESSION_TYPE_UNSPECIFIED
}

func (x *ListMessagesResponse_DataMessage) GetIsTransactional() bool {
	if x != nil {
		return x.IsTransactional
	}
	return false
}

func (x *ListMessagesResponse_DataMessage) GetHeaders() []*KafkaRecordHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ListMessagesResponse_DataMessage) GetKey() *KafkaRecordPayload {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ListMessagesResponse_DataMessage) GetValue() *KafkaRecordPayload {
	if x != nil {
		return x.Value
	}
	return nil
}

// Phase control message.
type ListMessagesResponse_PhaseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase string `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"` // The current phase.
}

func (x *ListMessagesResponse_PhaseMessage) Reset() {
	*x = ListMessagesResponse_PhaseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMessagesResponse_PhaseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesResponse_PhaseMessage) ProtoMessage() {}

func (x *ListMessagesResponse_PhaseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesResponse_PhaseMessage.ProtoReflect.Descriptor instead.
func (*ListMessagesResponse_PhaseMessage) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ListMessagesResponse_PhaseMessage) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

// Progress control message.
type ListMessagesResponse_ProgressMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessagesConsumed int64 `protobuf:"varint,1,opt,name=messages_consumed,json=messagesConsumed,proto3" json:"messages_consumed,omitempty"` // Currently consumed messages.
	BytesConsumed    int64 `protobuf:"varint,2,opt,name=bytes_consumed,json=bytesConsumed,proto3" json:"bytes_consumed,omitempty"`          // Currently consumed bytes.
}

func (x *ListMessagesResponse_ProgressMessage) Reset() {
	*x = ListMessagesResponse_ProgressMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMessagesResponse_ProgressMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesResponse_ProgressMessage) ProtoMessage() {}

func (x *ListMessagesResponse_ProgressMessage) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesResponse_ProgressMessage.ProtoReflect.Descriptor instead.
func (*ListMessagesResponse_ProgressMessage) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescGZIP(), []int{1, 2}
}

func (x *ListMessagesResponse_ProgressMessage) GetMessagesConsumed() int64 {
	if x != nil {
		return x.MessagesConsumed
	}
	return 0
}

func (x *ListMessagesResponse_ProgressMessage) GetBytesConsumed() int64 {
	if x != nil {
		return x.BytesConsumed
	}
	return 0
}

// Stream completed control message.
type ListMessagesResponse_StreamCompletedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElapsedMs        int64 `protobuf:"varint,1,opt,name=elapsed_ms,json=elapsedMs,proto3" json:"elapsed_ms,omitempty"`                      // Total elapsed time in milliseconds.
	IsCancelled      bool  `protobuf:"varint,2,opt,name=is_cancelled,json=isCancelled,proto3" json:"is_cancelled,omitempty"`                // Whether the call was cancelled.
	MessagesConsumed int64 `protobuf:"varint,3,opt,name=messages_consumed,json=messagesConsumed,proto3" json:"messages_consumed,omitempty"` // Total consumed messages.
	BytesConsumed    int64 `protobuf:"varint,4,opt,name=bytes_consumed,json=bytesConsumed,proto3" json:"bytes_consumed,omitempty"`          // Total consumed bytes.
}

func (x *ListMessagesResponse_StreamCompletedMessage) Reset() {
	*x = ListMessagesResponse_StreamCompletedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMessagesResponse_StreamCompletedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesResponse_StreamCompletedMessage) ProtoMessage() {}

func (x *ListMessagesResponse_StreamCompletedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesResponse_StreamCompletedMessage.ProtoReflect.Descriptor instead.
func (*ListMessagesResponse_StreamCompletedMessage) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescGZIP(), []int{1, 3}
}

func (x *ListMessagesResponse_StreamCompletedMessage) GetElapsedMs() int64 {
	if x != nil {
		return x.ElapsedMs
	}
	return 0
}

func (x *ListMessagesResponse_StreamCompletedMessage) GetIsCancelled() bool {
	if x != nil {
		return x.IsCancelled
	}
	return false
}

func (x *ListMessagesResponse_StreamCompletedMessage) GetMessagesConsumed() int64 {
	if x != nil {
		return x.MessagesConsumed
	}
	return 0
}

func (x *ListMessagesResponse_StreamCompletedMessage) GetBytesConsumed() int64 {
	if x != nil {
		return x.BytesConsumed
	}
	return 0
}

// Error control message.
type ListMessagesResponse_ErrorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // The error message.
}

func (x *ListMessagesResponse_ErrorMessage) Reset() {
	*x = ListMessagesResponse_ErrorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMessagesResponse_ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesResponse_ErrorMessage) ProtoMessage() {}

func (x *ListMessagesResponse_ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesResponse_ErrorMessage.ProtoReflect.Descriptor instead.
func (*ListMessagesResponse_ErrorMessage) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescGZIP(), []int{1, 4}
}

func (x *ListMessagesResponse_ErrorMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_redpanda_api_console_v1alpha1_list_messages_proto protoreflect.FileDescriptor

var file_redpanda_api_console_v1alpha1_list_messages_proto_rawDesc = []byte{
	0x0a, 0x31, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2a, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x05, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x01, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b, 0xba, 0x48, 0x08,
	0x42, 0x06, 0x32, 0x04, 0x01, 0x03, 0x05, 0x07, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0xba, 0x48, 0x0d, 0x1a, 0x0b, 0x28, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f, 0x6f, 0x74,
	0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x77, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x5e, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x6b,
	0x65, 0x79, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x62, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x01, 0x52,
	0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x53,
	0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x22, 0xa1, 0x0a, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x60, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x6f, 0x6e, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xbd, 0x03,
	0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x50, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x43, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x24, 0x0a,
	0x0c, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x1a, 0x65, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x1a, 0xae, 0x01, 0x0a, 0x16, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x4d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x1a, 0x28, 0x0a, 0x0c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd8, 0x03, 0x0a, 0x12, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x2e, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x12, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x11, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6f,
	0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x74, 0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x73, 0x68, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x12, 0x74, 0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x68,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x69, 0x64, 0x42, 0xbe, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2,
	0x02, 0x03, 0x52, 0x41, 0x43, 0xaa, 0x02, 0x1d, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1d, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x29, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70,
	0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescOnce sync.Once
	file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescData = file_redpanda_api_console_v1alpha1_list_messages_proto_rawDesc
)

func file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescGZIP() []byte {
	file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescOnce.Do(func() {
		file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescData)
	})
	return file_redpanda_api_console_v1alpha1_list_messages_proto_rawDescData
}

var file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_redpanda_api_console_v1alpha1_list_messages_proto_goTypes = []interface{}{
	(*ListMessagesRequest)(nil),                         // 0: redpanda.api.console.v1alpha1.ListMessagesRequest
	(*ListMessagesResponse)(nil),                        // 1: redpanda.api.console.v1alpha1.ListMessagesResponse
	(*KafkaRecordPayload)(nil),                          // 2: redpanda.api.console.v1alpha1.KafkaRecordPayload
	(*ListMessagesResponse_DataMessage)(nil),            // 3: redpanda.api.console.v1alpha1.ListMessagesResponse.DataMessage
	(*ListMessagesResponse_PhaseMessage)(nil),           // 4: redpanda.api.console.v1alpha1.ListMessagesResponse.PhaseMessage
	(*ListMessagesResponse_ProgressMessage)(nil),        // 5: redpanda.api.console.v1alpha1.ListMessagesResponse.ProgressMessage
	(*ListMessagesResponse_StreamCompletedMessage)(nil), // 6: redpanda.api.console.v1alpha1.ListMessagesResponse.StreamCompletedMessage
	(*ListMessagesResponse_ErrorMessage)(nil),           // 7: redpanda.api.console.v1alpha1.ListMessagesResponse.ErrorMessage
	(PayloadEncoding)(0),                                // 8: redpanda.api.console.v1alpha1.PayloadEncoding
	(*TroubleshootReport)(nil),                          // 9: redpanda.api.console.v1alpha1.TroubleshootReport
	(CompressionType)(0),                                // 10: redpanda.api.console.v1alpha1.CompressionType
	(*KafkaRecordHeader)(nil),                           // 11: redpanda.api.console.v1alpha1.KafkaRecordHeader
}
var file_redpanda_api_console_v1alpha1_list_messages_proto_depIdxs = []int32{
	8,  // 0: redpanda.api.console.v1alpha1.ListMessagesRequest.key_deserializer:type_name -> redpanda.api.console.v1alpha1.PayloadEncoding
	8,  // 1: redpanda.api.console.v1alpha1.ListMessagesRequest.value_deserializer:type_name -> redpanda.api.console.v1alpha1.PayloadEncoding
	3,  // 2: redpanda.api.console.v1alpha1.ListMessagesResponse.data:type_name -> redpanda.api.console.v1alpha1.ListMessagesResponse.DataMessage
	4,  // 3: redpanda.api.console.v1alpha1.ListMessagesResponse.phase:type_name -> redpanda.api.console.v1alpha1.ListMessagesResponse.PhaseMessage
	5,  // 4: redpanda.api.console.v1alpha1.ListMessagesResponse.progress:type_name -> redpanda.api.console.v1alpha1.ListMessagesResponse.ProgressMessage
	6,  // 5: redpanda.api.console.v1alpha1.ListMessagesResponse.done:type_name -> redpanda.api.console.v1alpha1.ListMessagesResponse.StreamCompletedMessage
	7,  // 6: redpanda.api.console.v1alpha1.ListMessagesResponse.error:type_name -> redpanda.api.console.v1alpha1.ListMessagesResponse.ErrorMessage
	8,  // 7: redpanda.api.console.v1alpha1.KafkaRecordPayload.encoding:type_name -> redpanda.api.console.v1alpha1.PayloadEncoding
	9,  // 8: redpanda.api.console.v1alpha1.KafkaRecordPayload.troubleshoot_report:type_name -> redpanda.api.console.v1alpha1.TroubleshootReport
	10, // 9: redpanda.api.console.v1alpha1.ListMessagesResponse.DataMessage.compression:type_name -> redpanda.api.console.v1alpha1.CompressionType
	11, // 10: redpanda.api.console.v1alpha1.ListMessagesResponse.DataMessage.headers:type_name -> redpanda.api.console.v1alpha1.KafkaRecordHeader
	2,  // 11: redpanda.api.console.v1alpha1.ListMessagesResponse.DataMessage.key:type_name -> redpanda.api.console.v1alpha1.KafkaRecordPayload
	2,  // 12: redpanda.api.console.v1alpha1.ListMessagesResponse.DataMessage.value:type_name -> redpanda.api.console.v1alpha1.KafkaRecordPayload
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_redpanda_api_console_v1alpha1_list_messages_proto_init() }
func file_redpanda_api_console_v1alpha1_list_messages_proto_init() {
	if File_redpanda_api_console_v1alpha1_list_messages_proto != nil {
		return
	}
	file_redpanda_api_console_v1alpha1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaRecordPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMessagesResponse_DataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMessagesResponse_PhaseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMessagesResponse_ProgressMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMessagesResponse_StreamCompletedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMessagesResponse_ErrorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ListMessagesResponse_Data)(nil),
		(*ListMessagesResponse_Phase)(nil),
		(*ListMessagesResponse_Progress)(nil),
		(*ListMessagesResponse_Done)(nil),
		(*ListMessagesResponse_Error)(nil),
	}
	file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_console_v1alpha1_list_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_redpanda_api_console_v1alpha1_list_messages_proto_goTypes,
		DependencyIndexes: file_redpanda_api_console_v1alpha1_list_messages_proto_depIdxs,
		MessageInfos:      file_redpanda_api_console_v1alpha1_list_messages_proto_msgTypes,
	}.Build()
	File_redpanda_api_console_v1alpha1_list_messages_proto = out.File
	file_redpanda_api_console_v1alpha1_list_messages_proto_rawDesc = nil
	file_redpanda_api_console_v1alpha1_list_messages_proto_goTypes = nil
	file_redpanda_api_console_v1alpha1_list_messages_proto_depIdxs = nil
}
