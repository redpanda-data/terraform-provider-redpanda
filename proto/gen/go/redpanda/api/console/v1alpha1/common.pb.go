// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: redpanda/api/console/v1alpha1/common.proto

package consolev1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompressionType int32

const (
	CompressionType_COMPRESSION_TYPE_UNSPECIFIED  CompressionType = 0
	CompressionType_COMPRESSION_TYPE_UNCOMPRESSED CompressionType = 1
	CompressionType_COMPRESSION_TYPE_GZIP         CompressionType = 2
	CompressionType_COMPRESSION_TYPE_SNAPPY       CompressionType = 3
	CompressionType_COMPRESSION_TYPE_LZ4          CompressionType = 4
	CompressionType_COMPRESSION_TYPE_ZSTD         CompressionType = 5
)

// Enum value maps for CompressionType.
var (
	CompressionType_name = map[int32]string{
		0: "COMPRESSION_TYPE_UNSPECIFIED",
		1: "COMPRESSION_TYPE_UNCOMPRESSED",
		2: "COMPRESSION_TYPE_GZIP",
		3: "COMPRESSION_TYPE_SNAPPY",
		4: "COMPRESSION_TYPE_LZ4",
		5: "COMPRESSION_TYPE_ZSTD",
	}
	CompressionType_value = map[string]int32{
		"COMPRESSION_TYPE_UNSPECIFIED":  0,
		"COMPRESSION_TYPE_UNCOMPRESSED": 1,
		"COMPRESSION_TYPE_GZIP":         2,
		"COMPRESSION_TYPE_SNAPPY":       3,
		"COMPRESSION_TYPE_LZ4":          4,
		"COMPRESSION_TYPE_ZSTD":         5,
	}
)

func (x CompressionType) Enum() *CompressionType {
	p := new(CompressionType)
	*p = x
	return p
}

func (x CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_common_proto_enumTypes[0].Descriptor()
}

func (CompressionType) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_common_proto_enumTypes[0]
}

func (x CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionType.Descriptor instead.
func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_common_proto_rawDescGZIP(), []int{0}
}

type PayloadEncoding int32

const (
	PayloadEncoding_PAYLOAD_ENCODING_UNSPECIFIED      PayloadEncoding = 0
	PayloadEncoding_PAYLOAD_ENCODING_NULL             PayloadEncoding = 1
	PayloadEncoding_PAYLOAD_ENCODING_AVRO             PayloadEncoding = 2
	PayloadEncoding_PAYLOAD_ENCODING_PROTOBUF         PayloadEncoding = 3
	PayloadEncoding_PAYLOAD_ENCODING_PROTOBUF_SCHEMA  PayloadEncoding = 4
	PayloadEncoding_PAYLOAD_ENCODING_JSON             PayloadEncoding = 5
	PayloadEncoding_PAYLOAD_ENCODING_JSON_SCHEMA      PayloadEncoding = 6
	PayloadEncoding_PAYLOAD_ENCODING_XML              PayloadEncoding = 7
	PayloadEncoding_PAYLOAD_ENCODING_TEXT             PayloadEncoding = 8
	PayloadEncoding_PAYLOAD_ENCODING_UTF8             PayloadEncoding = 9
	PayloadEncoding_PAYLOAD_ENCODING_MESSAGE_PACK     PayloadEncoding = 10
	PayloadEncoding_PAYLOAD_ENCODING_SMILE            PayloadEncoding = 11
	PayloadEncoding_PAYLOAD_ENCODING_BINARY           PayloadEncoding = 12
	PayloadEncoding_PAYLOAD_ENCODING_UINT             PayloadEncoding = 13
	PayloadEncoding_PAYLOAD_ENCODING_CONSUMER_OFFSETS PayloadEncoding = 14
)

// Enum value maps for PayloadEncoding.
var (
	PayloadEncoding_name = map[int32]string{
		0:  "PAYLOAD_ENCODING_UNSPECIFIED",
		1:  "PAYLOAD_ENCODING_NULL",
		2:  "PAYLOAD_ENCODING_AVRO",
		3:  "PAYLOAD_ENCODING_PROTOBUF",
		4:  "PAYLOAD_ENCODING_PROTOBUF_SCHEMA",
		5:  "PAYLOAD_ENCODING_JSON",
		6:  "PAYLOAD_ENCODING_JSON_SCHEMA",
		7:  "PAYLOAD_ENCODING_XML",
		8:  "PAYLOAD_ENCODING_TEXT",
		9:  "PAYLOAD_ENCODING_UTF8",
		10: "PAYLOAD_ENCODING_MESSAGE_PACK",
		11: "PAYLOAD_ENCODING_SMILE",
		12: "PAYLOAD_ENCODING_BINARY",
		13: "PAYLOAD_ENCODING_UINT",
		14: "PAYLOAD_ENCODING_CONSUMER_OFFSETS",
	}
	PayloadEncoding_value = map[string]int32{
		"PAYLOAD_ENCODING_UNSPECIFIED":      0,
		"PAYLOAD_ENCODING_NULL":             1,
		"PAYLOAD_ENCODING_AVRO":             2,
		"PAYLOAD_ENCODING_PROTOBUF":         3,
		"PAYLOAD_ENCODING_PROTOBUF_SCHEMA":  4,
		"PAYLOAD_ENCODING_JSON":             5,
		"PAYLOAD_ENCODING_JSON_SCHEMA":      6,
		"PAYLOAD_ENCODING_XML":              7,
		"PAYLOAD_ENCODING_TEXT":             8,
		"PAYLOAD_ENCODING_UTF8":             9,
		"PAYLOAD_ENCODING_MESSAGE_PACK":     10,
		"PAYLOAD_ENCODING_SMILE":            11,
		"PAYLOAD_ENCODING_BINARY":           12,
		"PAYLOAD_ENCODING_UINT":             13,
		"PAYLOAD_ENCODING_CONSUMER_OFFSETS": 14,
	}
)

func (x PayloadEncoding) Enum() *PayloadEncoding {
	p := new(PayloadEncoding)
	*p = x
	return p
}

func (x PayloadEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayloadEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_common_proto_enumTypes[1].Descriptor()
}

func (PayloadEncoding) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_common_proto_enumTypes[1]
}

func (x PayloadEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayloadEncoding.Descriptor instead.
func (PayloadEncoding) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_common_proto_rawDescGZIP(), []int{1}
}

// KafkaRecordHeader is the record header.
type KafkaRecordHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`     // Header key.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // Header value.
}

func (x *KafkaRecordHeader) Reset() {
	*x = KafkaRecordHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaRecordHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaRecordHeader) ProtoMessage() {}

func (x *KafkaRecordHeader) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaRecordHeader.ProtoReflect.Descriptor instead.
func (*KafkaRecordHeader) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_common_proto_rawDescGZIP(), []int{0}
}

func (x *KafkaRecordHeader) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KafkaRecordHeader) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type TroubleshootReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerdeName string `protobuf:"bytes,1,opt,name=serde_name,json=serdeName,proto3" json:"serde_name,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TroubleshootReport) Reset() {
	*x = TroubleshootReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TroubleshootReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TroubleshootReport) ProtoMessage() {}

func (x *TroubleshootReport) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TroubleshootReport.ProtoReflect.Descriptor instead.
func (*TroubleshootReport) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_common_proto_rawDescGZIP(), []int{1}
}

func (x *TroubleshootReport) GetSerdeName() string {
	if x != nil {
		return x.SerdeName
	}
	return ""
}

func (x *TroubleshootReport) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_redpanda_api_console_v1alpha1_common_proto protoreflect.FileDescriptor

var file_redpanda_api_console_v1alpha1_common_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0x3b, 0x0a, 0x11, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x12, 0x54, 0x72, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0xc3, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x43,
	0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4e, 0x41, 0x50, 0x50, 0x59, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x5a, 0x34,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x53, 0x54, 0x44, 0x10, 0x05, 0x2a, 0xd9, 0x03,
	0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x43,
	0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45,
	0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x56, 0x52, 0x4f, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x59,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x41, 0x59, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x42, 0x55, 0x46, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x04, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x59,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4a, 0x53,
	0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x58, 0x4d, 0x4c, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x08,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x54, 0x46, 0x38, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x50,
	0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x0a, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x4d, 0x49, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41,
	0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42,
	0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x49, 0x4e, 0x54,
	0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e,
	0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f,
	0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x53, 0x10, 0x0e, 0x42, 0xb8, 0x02, 0x0a, 0x21, 0x63, 0x6f,
	0x6d, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42,
	0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2,
	0x02, 0x03, 0x52, 0x41, 0x43, 0xaa, 0x02, 0x1d, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1d, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x29, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70,
	0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redpanda_api_console_v1alpha1_common_proto_rawDescOnce sync.Once
	file_redpanda_api_console_v1alpha1_common_proto_rawDescData = file_redpanda_api_console_v1alpha1_common_proto_rawDesc
)

func file_redpanda_api_console_v1alpha1_common_proto_rawDescGZIP() []byte {
	file_redpanda_api_console_v1alpha1_common_proto_rawDescOnce.Do(func() {
		file_redpanda_api_console_v1alpha1_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_console_v1alpha1_common_proto_rawDescData)
	})
	return file_redpanda_api_console_v1alpha1_common_proto_rawDescData
}

var file_redpanda_api_console_v1alpha1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_redpanda_api_console_v1alpha1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_redpanda_api_console_v1alpha1_common_proto_goTypes = []interface{}{
	(CompressionType)(0),       // 0: redpanda.api.console.v1alpha1.CompressionType
	(PayloadEncoding)(0),       // 1: redpanda.api.console.v1alpha1.PayloadEncoding
	(*KafkaRecordHeader)(nil),  // 2: redpanda.api.console.v1alpha1.KafkaRecordHeader
	(*TroubleshootReport)(nil), // 3: redpanda.api.console.v1alpha1.TroubleshootReport
}
var file_redpanda_api_console_v1alpha1_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_redpanda_api_console_v1alpha1_common_proto_init() }
func file_redpanda_api_console_v1alpha1_common_proto_init() {
	if File_redpanda_api_console_v1alpha1_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_redpanda_api_console_v1alpha1_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaRecordHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TroubleshootReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_console_v1alpha1_common_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_redpanda_api_console_v1alpha1_common_proto_goTypes,
		DependencyIndexes: file_redpanda_api_console_v1alpha1_common_proto_depIdxs,
		EnumInfos:         file_redpanda_api_console_v1alpha1_common_proto_enumTypes,
		MessageInfos:      file_redpanda_api_console_v1alpha1_common_proto_msgTypes,
	}.Build()
	File_redpanda_api_console_v1alpha1_common_proto = out.File
	file_redpanda_api_console_v1alpha1_common_proto_rawDesc = nil
	file_redpanda_api_console_v1alpha1_common_proto_goTypes = nil
	file_redpanda_api_console_v1alpha1_common_proto_depIdxs = nil
}
